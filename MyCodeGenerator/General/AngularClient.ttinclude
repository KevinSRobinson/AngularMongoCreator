<#+
            
            public class GenApp
            {
                public string BasePath {get; set; }
                public string ClientSrcPath {get; set; }
                public string FeaturesBasePath {get; set; }
                public string NavigationBasePath {get; set; }
                public List<CodeClass> Classes {get; set; }
                public List<Feature> Features {get; set; }

                public GenApp(string basePath, List<CodeClass> classes){
                    BasePath = basePath;
                    ClientSrcPath = basePath + "src/client/";
                    FeaturesBasePath = ClientSrcPath + "Features/";
                    NavigationBasePath = ClientSrcPath + "Navigation/";
                    Classes = classes;

                    //populate features
                    LoadFeatures();

                }


                private void LoadFeatures(){
                    Features = new List<Feature>();
                    foreach(var c in Classes){
                        var feature =  new Feature(c, FeaturesBasePath);
                        Features.Add(feature);
                    }
                }

            }

          public class Feature  {
            
            public CodeHelper _;
            public Component ListComponent;
            public DataService DataService;
            public Modals Modals;

            public string BasePath = "";
            public string Path = "";
            public string FullPath = "";  

            
            public Feature(CodeClass codeClass, string basePath){
                 _ = new CodeHelper(codeClass);

                 //Base path for the features              
                 BasePath = basePath;

                 //Full Path to this features
                 Path = string.Format("{0}/", _.Plural);    

                 //Full Path to this features
                 FullPath = string.Format("{0}{1}/", BasePath, Path);    

                 //Create a new Features Item
                 ListComponent = new Component(_, "List", BasePath);

                 //Create a new Modals Item
                 Modals = new Modals(_, FullPath);
                
                 //Create a new DataServices Item
                 DataService = new DataService(_, BasePath);
       
            }            




        }
  
   


        public class Component {
            public CodeHelper _;
            private string _name;
            private string _componentName = "";
            
            private string _templateFileName = "";  

            public Component(CodeHelper helper, string name, string basePath){
                _ = helper;
                _name = name;
                BasePath = basePath;
                _componentName = _.CamelCase + _name;
                _templateFileName = _componentName + ".html";
                FileName = _componentName + ".js";

                //build the relative path to the Component
                Path = string.Format("{0}/Components/{1}/", _.Plural, _componentName);

                //build the full path to the Component
                FullPath = string.Format("{0}/{1}/", basePath, Path);
                
                //build the Url for to the Tempalte              
                TemplateUrl = string.Format("{0}{1}", Path, TemplateFileName); 
            
  
                ComponentTag = GetComponentTag(this._componentName);
            }

            public string BasePath { get ; set; }

            public string FullPath { get ; set; }

            public string Path { get; set; }
 
            public string FileName { get ; set; }

            public string ComponentName { get  { return _componentName;  }}

            public string ComponentTag { get; set;  }

            public string TemplateUrl { get; set;}
                    
            public string TemplateFileName { get { return _templateFileName; }}  
          
            private string GetComponentTag(string componentName){
                 var output = "";
                 foreach (char letter in componentName)
                 {
                 if (Char.IsUpper(letter) && output.Length > 0)
                    output += "-" + letter;
                 else
                    output += letter;
            }
            return string.Format("<{0}></{0}>", output.ToLower());
        }  
   
        }


        public class DataService{

            public CodeHelper _;
            public string BasePath = "";

            public DataService(CodeHelper helper, string basePath){
               _ = helper;
            BasePath = basePath;
            }
            
            public string Path 
                { get
                {
                    return BasePath + "DataServices/";;
                }
            }

            public string FileName 
                { get
                {
                    return ServiceName + ".js";
                }
            }

            public string ServiceName 
                { get
                {
                    return _.Name + "DataService";
                }
            }
            
                        

         }


        public class Modals{

            public CodeHelper _;
            
            public string Name {get; set;}
            public string BasePath {get; set;}
            public string FullPath {get; set;}
            public string Path {get; set;}
            public string ServiceName {get; set;}
            public string ServiceFileName {get; set;}
            public string ModifyTemplateFileName {get; set;}
            public string ModifyController {get; set;}
            public string ModifyTemplateUrl {get; set;}
            public string ModifyControllerFileName {get; set;}
            

            public Modals(CodeHelper helper, string basePath){
                _ = helper;

                //C:/Repos/NodeMongoAngular/Generated/Web/src/client/Features/Contacts/
                BasePath = basePath;

                //build the relative path to the Component
                Path = "Modals/";

                //build the full path to the Component
                FullPath = string.Format("{0}/{1}/", basePath, Path);

                ServiceName = string.Format("{0}ModalService", _.Name);
                ServiceFileName = string.Format("{0}.js", ServiceName);
            
                ModifyTemplateFileName = string.Format("modify{0}ModalTemplate.html", _.Name);
                ModifyTemplateUrl = string.Format("{0}{1}", Path, ModifyTemplateFileName);

                ModifyController = string.Format("modify{0}ModalController", _.Name);
                ModifyControllerFileName = string.Format("{0}.js", ModifyController);
             
            }



        }


      


 

       


 #>