<#+
            
            public class GenApp
            {
                public string BasePath {get; set; }
                public string ClientSrcPath {get; set; }
                public string FeaturesSubPath {get; set; }
                public string SubPathToSource {get; set; }
                public string NavigationBasePath {get; set; }
                public string DataServicesPath {get; set; }
                public List<CodeClass> Classes {get; set; }
                public List<Feature> Features {get; set; }

                public GenApp(string basePath, List<CodeClass> classes){
                    BasePath = basePath;
                    DataServicesPath = BasePath + "DataServices/";
                    SubPathToSource = "src/client/";
                    ClientSrcPath = basePath + SubPathToSource;
                    DataServicesPath = ClientSrcPath + "DataServices/";

                    FeaturesSubPath = "Features/";
                    NavigationBasePath = ClientSrcPath + "Navigation/";
                    
                    Classes = classes;

                    //populate features
                    LoadFeatures();

                }


                private void LoadFeatures(){
                    Features = new List<Feature>();
                    foreach(var c in Classes){
                        var feature =  new Feature(c, BasePath, FeaturesSubPath, DataServicesPath, SubPathToSource);
                        Features.Add(feature);
                    }
                }

            }

          public class Feature  {
            
            public CodeHelper _;
            public Component ListComponent;
            public DataService DataService;
            public Modals Modals;

            public string BasePath = "";
            public string Path = "";
            public string FullPath = "";  

            
            public Feature(CodeClass codeClass, string BasePath,  string FeaturesSubPath, string dataServicesPath, string subPathToSource){
                 _ = new CodeHelper(codeClass);

                 //Base path for the features              
                 BasePath = BasePath;

                 //Full Path to this features
                 Path = string.Format("{0}/", _.Plural);    

                 //Full Path to this features
            FullPath = string.Format("{0}{1}{2}{3}", BasePath, subPathToSource,FeaturesSubPath, Path);    

                 //Create a new Features Item
                 ListComponent = new Component(_, "List", BasePath, subPathToSource, FeaturesSubPath);

                 //Create a new Modals Item
                 Modals = new Modals(_, BasePath, subPathToSource, FeaturesSubPath);
                
                 //Create a new DataServices Item
                 DataService = new DataService(_.CamelCase, dataServicesPath);
       
            }            




        }
  
   


        public class Component {
            public CodeHelper _;
            private string _name; 

            public Component(CodeHelper helper, string name, string basePath, string subPathToSource, string FeaturesSubPath){
                _ = helper;
                _name = name;
                BasePath = basePath;
                ComponentName = _.CamelCase + _name;
                TemplateFileName = ComponentName + ".html";
                FileName = ComponentName + ".js";

                //build the relative path to the Component
               var comPath = string.Format("{0}/Components/{1}/", _.Plural, ComponentName);

                
                
                //build the Url for to the Tempalte              
                Path = string.Format("{0}{1}{2}", subPathToSource, FeaturesSubPath, comPath); 
                TemplateUrl = string.Format("{0}{1}", Path, TemplateFileName); 

            
            //build the full path to the Component
                FullPath = string.Format("{0}/{1}", basePath, Path);
  
                ComponentTag = GetComponentTag(this.ComponentName);
            }

            public string BasePath { get ; set; }

            public string FullPath { get ; set; }

            public string Path { get; set; }
 
            public string FileName { get ; set; }

            public string ComponentName { get ; set; }

            public string ComponentTag { get; set;  }

            public string TemplateUrl { get; set;}
                    
            public string TemplateFileName { get ; set; }
          
            private string GetComponentTag(string componentName){
                 var output = "";
                 foreach (char letter in componentName)
                 {
                 if (Char.IsUpper(letter) && output.Length > 0)
                    output += "-" + letter;
                 else
                    output += letter;
            }
            return string.Format("<{0}></{0}>", output.ToLower());
        }  
   
        }


        public class DataService{

            public DataService(string name, string basePath){
                Path =  basePath;
                ServiceName = name + "DataService";
             FileName = ServiceName + ".js";
            }
            
           
            public string Path {get; set; }
            public string FileName {get; set; }
            public string ServiceName {get; set; }
               
            
                        

         }


        public class Modals{

            public CodeHelper _;
            
            public string Name {get; set;}
            public string BasePath {get; set;}
            public string FullPath {get; set;}
            public string Path {get; set;}
            public string ServiceName {get; set;}
            public string ServiceFileName {get; set;}
            public string ModifyTemplateFileName {get; set;}
            public string ModifyController {get; set;}
            public string ModifyTemplateUrl {get; set;}
            public string ModifyControllerFileName {get; set;}
            

            public Modals(CodeHelper helper, string basePath, string subPathToSource, string FeaturesSubPath) {
                _ = helper;

                //C:/Repos/NodeMongoAngular/Generated/Web/src/client/Features/Contacts/
                BasePath = basePath;

                //build the relative path to the Component
                Path = "Modals/";

                //build the full path to the Component
            FullPath = string.Format("{0}/{1}/{2}/{3}/{4}/", basePath, subPathToSource, FeaturesSubPath, _.Plural, Path);

                ServiceName = string.Format("{0}ModalService", _.CamelCase);
                ServiceFileName = string.Format("{0}.js", ServiceName);
            
                ModifyTemplateFileName = string.Format("modify{0}ModalTemplate.html", _.Name);
                ModifyTemplateUrl = string.Format("{0}{1}", Path, ModifyTemplateFileName);

                ModifyController = string.Format("modify{0}ModalController", _.Name);
                ModifyControllerFileName = string.Format("{0}.js", ModifyController);
             
            }



        }


      


 

       


 #>