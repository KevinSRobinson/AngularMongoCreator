<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+


   
    //////////////////////////////////////
    ////JSON
    string GenerateSampleJsonCollection(string name, CodeClass codeclass, int numberOfItems){
        
        var jsonCollection= "[";

        //create 
        for(int i=1; i<numberOfItems; i++){
            jsonCollection += GeneratJsonObject(i, codeclass);
        }

        //remove last commma
        jsonCollection = jsonCollection.Substring(0, jsonCollection.Length -1);

        //close colleciton
        jsonCollection += "]";

        return jsonCollection;
    }

    

    bool IsProperty(string memberType){
        return memberType == "vsCMElementProperty";
    }   
    
    string GeneratJsonObject(int count, CodeClass codeClass){
       
        var jsonObject = "{";
           
        //write a property with test value for each
        foreach (CodeElement meb in codeClass.Members) {
            if (IsProperty(meb.Kind.ToString())) {			
                jsonObject += GetJsonProperty(meb, GetTestValue(count, meb));
            };
        }
        
        jsonObject = jsonObject.Substring(0, jsonObject.Length -1);
        jsonObject += "},";

        return jsonObject;

    }
  

    
    string GetTestValue(int count, CodeElement member){
        
        var prop = member as CodeProperty;	

        //Get the property Type
	    var type = prop.Type.AsString;

        switch(type){
            case "string":
                return WrapInDoubleQuotes("Test Value");  
                break;      
            case "int":
                return count.ToString();
                break;
            case "System.Guid":
                return WrapInDoubleQuotes(Guid.NewGuid().ToString());
                break;
		    default:
                    return type;
                break;
		    }
    }

    string WrapInDoubleQuotes(string val){
        return String.Format("{0}{1}{0}", Convert.ToChar(34), val);
    }




    string GetJsonProperty(CodeElement member, string val){
        var prop = member as CodeProperty;		
        return String.Format("{0}{1}{0}:{2},", Convert.ToChar(34), GetCamelcaseClassName(prop.Name), val);
    }






    //////////////////////////////////
    //Mongo DB
    string GetMongoDbSchema(CodeClassHelper helper){
        var schema = "";
        foreach (CodeElement meb in helper.CodeClass.Members) {
            if (IsProperty(meb.Kind.ToString())) {	
                schema += GetJsonSchemaProperty(meb);      
            };           
        }
        return schema;
    }
    string GetJsonSchemaProperty(CodeElement member){
        var prop = member as CodeProperty;	

        //Get the property Type
	    var type = prop.Type.AsString;

        var mongooseSchemaType = "";

        switch(type)
            {   
               case "string"  :
                    mongooseSchemaType = "String";
                    break;
               case "int"  :
                    mongooseSchemaType = "Number";
                    break;
               case "System.Guid"  :
                    mongooseSchemaType = "String";
                    break;
               default:
                    mongooseSchemaType = "String";
                    break;
            }


        return String.Format("{0} : {1}, ", member.Name, mongooseSchemaType);
    }

    string GetDateSchemaProperty(string fieldName){
        var property =  fieldName + ": {" ;
        property += " type: Date," ;
        property += " default: Date.now"  ;
        property += " }} "  ;
        return property;   
    }

#>